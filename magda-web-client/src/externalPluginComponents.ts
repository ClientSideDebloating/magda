import { ComponentType } from "react";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";
import { withRouter, match } from "react-router-dom";
import { Location, History } from "history";
import { User } from "./reducers/userManagementReducer";
import { requestSignOut, requestWhoAmI } from "./actions/userManagementActions";
import { fetchContent } from "./actions/contentActions";
import { config, ConfigDataType } from "./config";
import { ParsedDataset } from "./helpers/record";

export const PREFIX = "MagdaPluginComponent";

/**
 * The common properties that all external UI plugins will receive.
 *
 * @export
 * @interface CommonPropsType
 */
export interface CommonPropsType {
    /**
     * Whether or not the user profile loading request is still in progress.
     *
     * @type {boolean}
     * @memberof CommonPropsType
     */
    isFetchingWhoAmI: boolean;

    /**
     * the user profile data including roles, permission & orgUnit information.
     *
     * @type {User}
     * @memberof CommonPropsType
     */
    user: User;

    /**
     * When it's not `null`, this fields contains the error thrown by the user profile loading request
     */
    whoAmIError: Error | null;

    /**
     * The `config` field contains all frontend config data fields.
     * External UI plugin developer might be interested in `config.extraConfigData` field.
     * `config.extraConfigData` field serves as an interface to config external UI plugin at deployment time.
     * External UI plugin related config data can be supplied via [web-server](https://github.com/magda-io/magda/tree/master/deploy/helm/internal-charts/web-server) helm chart.
     *
     * @type {ConfigDataType}
     * @memberof CommonPropsType
     */
    config: ConfigDataType;

    /**
     * The [history object](https://github.com/remix-run/history/blob/v4/docs/Navigation.md) that you can use to control application navigation.
     * e.g. switch to a new url.
     *
     * @type {History<any>}
     * @memberof CommonPropsType
     */
    history: History<any>;

    /**
     * The [location object](https://github.com/remix-run/history/blob/v4/docs/GettingStarted.md#listening) object implements
     * a subset of [the window.location interface](https://developer.mozilla.org/en-US/docs/Web/API/Location).
     *
     * @type {Location<any>}
     * @memberof CommonPropsType
     */
    location: Location<any>;

    /**
     * The match data is about a route at the given path relative to the current location.
     * It's generated by [react-router](https://v5.reactrouter.com/web/api/match).
     *
     * @type {match<any>}
     * @memberof CommonPropsType
     */
    match: match<any>;

    /**
     * When called, this function will dispatch the `sign out` action to sign the current user out.
     *
     * @memberof CommonPropsType
     */
    requestSignOut: () => Promise<void>;

    /**
     * When called, this function will dispatch an action to force the current user profile data to be reloaded / refreshed.
     * You may only want to call it after you just modified the user's profile.
     *
     * @memberof CommonPropsType
     */
    requestWhoAmI: () => Promise<void>;

    /**
     * When called, this function will dispatch an action to make all client side resource items (e.g. header & footer items etc.)
     * to be reloaded. You may only want to call it after the current user profile changed or any content items have been updated.
     * You can optionally passing a boolean parameter `noCache` to control the cache behaviour during the loading.
     * Its default value is `false`.
     *
     * @memberof CommonPropsType
     */
    fetchContent: (noCache?: boolean) => Promise<void>;
}

/**
 * Generic external plugin component type
 * @category External UI Plugin Component Types
 */
export type ExternalComponentType<T> = ComponentType<T & CommonPropsType>;

const mapStateToProps = (state) => {
    const { userManagement, isFetchingWhoAmI, whoAmIError } = state;

    return {
        user: userManagement.user,
        isFetchingWhoAmI,
        whoAmIError,
        config
    };
};

const mapDispatchToProps = (dispatch) => {
    return bindActionCreators(
        {
            requestSignOut,
            requestWhoAmI,
            fetchContent
        },
        dispatch
    );
};

export function getComponent<T>(name: string): ComponentType<T> | null {
    const fullComponentName = `${PREFIX}${name}`;
    const ExternalComponent: ExternalComponentType<T> = window?.[
        fullComponentName
    ]?.default
        ? window[fullComponentName].default
        : window?.[fullComponentName]
        ? window[fullComponentName]
        : null;

    if (!ExternalComponent) {
        return null;
    }

    return (withRouter(
        connect(mapStateToProps, mapDispatchToProps)(ExternalComponent as any)
    ) as unknown) as ComponentType<T>;
}

/**
 * The type of Header Navigation Item
 *
 * @export
 * @interface HeaderNavItem
 */
export interface HeaderNavItem {
    default?: {
        href: string;
        label: string;
        rel?: string;
        target?: string;
    };
    auth?: Record<string, never>;
    order: number;
}

export interface HeaderComponentProps {
    headerNavItems: HeaderNavItem[];
}

/**
 * Header external plugin component type
 * @category External UI Plugin Component Types
 */
export type HeaderComponentType = ComponentType<HeaderComponentProps>;
export type ExternalHeaderComponentType = ExternalComponentType<
    HeaderComponentProps
>;

export function getPluginHeader(): HeaderComponentType | null {
    return getComponent<HeaderComponentProps>("Header");
}

/**
 * Footer copyright config item
 *
 * @export
 * @interface CopyRightItem
 */
export interface CopyRightItem {
    href: string;
    htmlContent: string;
    logoSrc: string;
    order: number;
}

/**
 * Footer Navigation Link Config Item
 *
 * @export
 * @interface FooterNavLink
 */
export interface FooterNavLink {
    href: string;
    label: string;
    order: number;
}

/**
 * Footer Navigation Link Group
 *
 * @export
 * @interface FooterNavLinkGroup
 */
export interface FooterNavLinkGroup {
    label: string;
    links: FooterNavLink[];
    order: number;
}

export type FooterComponentPropsType = {
    noTopMargin: boolean;
    footerMediumNavs: FooterNavLinkGroup[];
    footerSmallNavs: FooterNavLinkGroup[];
    footerCopyRightItems: CopyRightItem[];
};

/**
 * Footer external plugin component type
 * @category External UI Plugin Component Types
 */
export type FooterComponentType = ComponentType<FooterComponentPropsType>;
export type ExternalFooterComponentType = ExternalComponentType<
    FooterComponentPropsType
>;

export function getPluginFooter(): FooterComponentType | null {
    return getComponent<FooterComponentPropsType>("Footer");
}

export type DatasetEditButtonComponentPropsType = {
    dataset: ParsedDataset;
};

/**
 * Dataset page `Edit Dataset` button external plugin component type
 * @category External UI Plugin Component Types
 */
export type DatasetEditButtonComponentType = ComponentType<
    DatasetEditButtonComponentPropsType
>;
export type ExternalDatasetEditButtonComponentType = ExternalComponentType<
    DatasetEditButtonComponentType
>;

export function getPluginDatasetEditButton(): DatasetEditButtonComponentType | null {
    return getComponent<DatasetEditButtonComponentPropsType>(
        "DatasetEditButton"
    );
}

export type DatasetLikeButtonComponentPropsType = {
    dataset: ParsedDataset;
};

/**
 * Search Result page `Like Button` external plugin component type
 * Please note: the `Like Button` on search result page is hidden unless a plugin component is supplied.
 * @category External UI Plugin Component Types
 */
export type DatasetLikeButtonComponentType = ComponentType<
    DatasetLikeButtonComponentPropsType
>;
export type ExternalDatasetLikeButtonComponentType = ExternalComponentType<
    DatasetLikeButtonComponentType
>;

export function getPluginDatasetLikeButton(): DatasetLikeButtonComponentType | null {
    return getComponent<DatasetLikeButtonComponentPropsType>(
        "DatasetLikeButton"
    );
}

export type ExtraVisualisationSectionComponentPropsType = {
    dataset: ParsedDataset;
    distributionId?: string;
};

/**
 * Visualisation Section external plugin component type.
 * This plugin will be mounted on dataset or distribution page.
 * More info & example please refer to repo: [magda-ui-plugin-component-dap-thumbnail-viewer](https://github.com/magda-io/magda-ui-plugin-component-dap-thumbnail-viewer)
 * @category External UI Plugin Component Types
 */
export type ExtraVisualisationSectionComponentType = ComponentType<
    ExtraVisualisationSectionComponentPropsType
>;
export type ExternalExtraVisualisationSectionComponentType = ExternalComponentType<
    ExtraVisualisationSectionComponentType
>;

export function getPluginExtraVisualisationSection(): ExtraVisualisationSectionComponentType | null {
    return getComponent<ExtraVisualisationSectionComponentPropsType>(
        "ExtraVisualisationSection"
    );
}
